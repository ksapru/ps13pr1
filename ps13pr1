#
#
#

#
#
# Problem set 13 

class Board:
    """ 
    """

    def __init__(self, height, width):
        """ """
        self.height = height
        self.width = width 
        self.slots = [[' '] * self.width for row in range(self.height)]


    def __repr__(self):
        """ Returns a string representation for a Board object.
        """
        s = ''         # begin with an empty string

    # add one row of slots at a time
        for row in range(self.height):
            s += '|'   # one vertical bar at the start of the row

            for col in range(self.width):
                s += self.slots[row][col] + '|'

            s += '\n'  # newline at the end of the row

       
        s += ('-' * (self.width *2 + 1)) + ' \n '
            
        for idx in range(self.width):
            s += str((idx % 10)) + ' '
        
        return s 
                  
         
        
    def add_checker(self, checker, col):
    

        assert(checker == 'X' or checker == 'O')
        assert(0 <= col < self.width)

    # put the rest of the method here
    
        row =  0 
    
        while self.slots[row][col] == '':
            row += 1 
            if row == self.height:
                break  
    
        self.slots[row - 1][col] = checker 



    def reset(self):
        """
        """
    
        self.slots = [[' '] * self.width for row in range(self.height)]
        
    
   
    def add_checkers(self, colnums):
        """ takes in a string of column numbers and places alternating
        checkers in those columns of the called Board object, 
        starting with 'X'.
        """
        checker = 'X'   # start by playing 'X'
        
        for col_str in colnums:
            col = int(col_str)
            if 0 <= col < self.width:
                self.add_checker(checker, col)

            # switch to the other checker
            if checker == 'X':
                checker = 'O'
            else:
                checker = 'X' 
    
    
    def can_add_to(self,col):
        """[summary]

        :param col: [description]
        :type col: [type]
        """
        
        if col in range(self.width) and self.slots[0][col] == ' ':
                return True 
        else:
            return False 
        
        
    def is_full(self):
        """[summary]
        """
        
        
        
        
    def remove_checker(self,col):
        """[summary]

        :param col: [description]
        :type col: [type]
        """
        
        
        
    

    
    
    
if __name__ == '__main__':
    b = Board(4, 5)
    print(b)
    
